---
name: Release

"on":
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Perform a dry run (don't create release)"
        required: false
        default: false
        type: boolean
  workflow_run:
    workflows: ["Code Quality and Build"]
    types: [completed]
    branches: [main]

jobs:
  determine-version:
    runs-on: ubuntu-latest
    # Only run if CI workflow succeeded or if manually triggered
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    outputs:
      version: ${{ steps.semver.outputs.version }}
      tag: ${{ steps.semver.outputs.tag }}
      version_tag: ${{ steps.semver.outputs.version_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for conventional commits

      - name: Determine next version
        id: semver
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "/^(BREAKING CHANGE|feat!|fix!)/"
          minor_pattern: "/^feat/"
          bump_each_commit: true
          bump_each_commit_patch_pattern: "/^(fix|perf)/"
          version_format: "${major}.${minor}.${patch}"
          search_commit_body: false
          user_format_type: "csv"
          # Enable debugging
          debug: true

      - name: Show determined version
        run: |
          echo "Determined version: ${{ steps.semver.outputs.version }}"
          echo "Tag: ${{ steps.semver.outputs.tag }}"
          echo "Version tag: ${{ steps.semver.outputs.version_tag }}"
          echo "All outputs:"
          echo "  version: '${{ steps.semver.outputs.version }}'"
          echo "  tag: '${{ steps.semver.outputs.tag }}'"
          echo "  version_tag: '${{ steps.semver.outputs.version_tag }}'"
          echo "  increment: '${{ steps.semver.outputs.increment }}'"
          echo "  previous_version: '${{ steps.semver.outputs.previous_version }}'"
          echo "  previous_tag: '${{ steps.semver.outputs.previous_tag }}'"

          # Debug git tag information
          echo "=== Git tag debugging ==="
          echo "All tags in repository:"
          git tag -l --sort=-version:refname | head -10
          echo "Latest tag with v prefix:"
          git tag -l "v*" --sort=-version:refname | head -5
          echo "Recent commits:"
          git log --oneline -10
          echo "Commits since last tag:"
          LATEST_TAG=$(git tag -l "v*" --sort=-version:refname | head -1)
          if [ -n "$LATEST_TAG" ]; then
            echo "Latest tag: $LATEST_TAG"
            git log --oneline "$LATEST_TAG"..HEAD || echo "No commits since $LATEST_TAG"
          else
            echo "No tags found"
          fi

  build-release:
    needs: determine-version
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
            make_target: build-linux
            artifacts: "dist/*linux*"
          - os: ubuntu-latest
            name: windows
            make_target: build-windows
            artifacts: "dist/*windows*"
          - os: macos-latest
            name: macos
            make_target: build-darwin-app
            artifacts: |
              dist/*darwin*
              dist/K8s*.app/**

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v4
        with:
          go-version: "1.23.4"
          cache: true

      - name: Update macOS Info.plist version
        if: matrix.os == 'macos-latest'
        run: |
          VERSION="${{ needs.determine-version.outputs.version }}"
          echo "Updating Info.plist version to: $VERSION"

          # Update CFBundleShortVersionString and CFBundleVersion
          sed -i '' "s|<key>CFBundleShortVersionString</key>|<key>CFBundleShortVersionString</key>|" assets/Info.plist
          sed -i '' "/<key>CFBundleShortVersionString<\/key>/{n;s|<string>.*</string>|<string>$VERSION</string>|;}" assets/Info.plist
          sed -i '' "/<key>CFBundleVersion<\/key>/{n;s|<string>.*</string>|<string>$VERSION</string>|;}" assets/Info.plist

          echo "Updated Info.plist contents:"
          cat assets/Info.plist

      - name: Install cross-compilation dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-mingw-w64-x86-64 \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu

      - name: Build for ${{ matrix.name }}
        run: make ${{ matrix.make_target }}

      - name: Sign macOS app bundle
        if: matrix.os == 'macos-latest'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.MACOS_CI_KEYCHAIN_PWD }}
        run: |
          # Turn our base64-encoded certificate back to a regular .p12 file
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

          # We need to create a new keychain, otherwise using the certificate will prompt
          # with a UI dialog asking for the certificate password, which we can't
          # use in a headless CI environment
          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain

          # Import the certificate with proper trust settings
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -A
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain

          # Set the keychain search order
          security list-keychains -d user -s build.keychain

          # List available certificates for debugging
          echo "=== Available certificates in keychain ==="
          security find-identity -v -p codesigning build.keychain
          echo "=== All identities in keychain ==="
          security find-identity -v build.keychain

          # Check certificate details more thoroughly
          echo "=== Certificate details ==="
          security find-certificate -a -p build.keychain | openssl x509 -text -noout | grep -E "(Subject|Issuer|Key Usage|Extended Key Usage|Certificate Policies)" || true

          # Try to find the certificate name automatically
          CERT_NAME=$(security find-identity -v -p codesigning build.keychain | grep -o '"[^"]*"' | head -1 | tr -d '"')
          if [ -n "$CERT_NAME" ]; then
            echo "Found certificate: $CERT_NAME"
            echo "Using certificate: $CERT_NAME"

            # Check if it's actually a Developer ID certificate by looking at the certificate policies
            CERT_POLICIES=$(security find-certificate -a -p build.keychain | openssl x509 -text -noout | grep -A 20 "Certificate Policies" | grep -o "1\.2\.840\.113635\.100\.6\.1\.[0-9]*" | head -1)
            if [ "$CERT_POLICIES" = "1.2.840.113635.100.6.1.13" ]; then
              echo "✓ Confirmed: This is a Developer ID Application certificate"
            elif [ "$CERT_POLICIES" = "1.2.840.113635.100.6.1.2" ]; then
              echo "✗ This is an Apple Development certificate - cannot be used for notarization"
              exit 1
            else
              echo "⚠ Could not determine certificate type from policies, proceeding anyway"
              echo "Certificate policies found: $CERT_POLICIES"
            fi
          else
            echo "No valid code signing certificate found"
            echo "Available identities:"
            security find-identity -v build.keychain

            # Show more detailed certificate information
            echo "=== Detailed certificate information ==="
            security find-certificate -a -c "Matt Kulka" -p build.keychain | openssl x509 -text -noout | head -50 || true

            echo "ERROR: Could not find a valid code signing identity"
            exit 1
          fi

          # Find the app bundle and sign it
          APP_BUNDLE=$(find dist -name "*.app" -type d | head -1)
          if [ -n "$APP_BUNDLE" ]; then
            echo "Signing app bundle: $APP_BUNDLE"

            # Use the found certificate name or fall back to the secret
            SIGNING_IDENTITY="${CERT_NAME:-$MACOS_CERTIFICATE_NAME}"
            echo "Using signing identity: $SIGNING_IDENTITY"

            # Sign the binary first with timestamp
            BINARY_PATH="$APP_BUNDLE/Contents/MacOS/k8s-tray"
            if [ -f "$BINARY_PATH" ]; then
              echo "Signing binary: $BINARY_PATH"
              /usr/bin/codesign --force --options runtime --timestamp --entitlements assets/entitlements.plist -s "$SIGNING_IDENTITY" "$BINARY_PATH" -v
            fi

            # Then sign the app bundle with timestamp
            /usr/bin/codesign --force --options runtime --timestamp --entitlements assets/entitlements.plist -s "$SIGNING_IDENTITY" "$APP_BUNDLE" -v

            # Verify the signature
            echo "=== Verifying binary signature ==="
            /usr/bin/codesign -vvv --deep --strict "$BINARY_PATH"
            echo "=== Verifying app bundle signature ==="
            /usr/bin/codesign -vvv --deep --strict "$APP_BUNDLE"
            echo "=== Code signature verification ==="
            /usr/bin/codesign -dvvv "$APP_BUNDLE"

            # Check if it would pass Gatekeeper (this might still fail until notarized)
            echo "=== Gatekeeper assessment ==="
            spctl -a -vvv "$APP_BUNDLE" || echo "Note: Gatekeeper rejection is expected until notarization"
          else
            echo "No app bundle found to sign"
            exit 1
          fi

      - name: Notarize macOS app bundle
        if: matrix.os == 'macos-latest'
        env:
          MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
          MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
          MACOS_NOTARIZATION_PWD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
        run: |
          APP_BUNDLE=$(find dist -name "*.app" -type d | head -1)

          # Check if app bundle exists
          if [ -z "$APP_BUNDLE" ]; then
            echo "ERROR: No app bundle found for notarization"
            exit 1
          fi

          # Check if notarization credentials are provided
          if [ -z "$MACOS_NOTARIZATION_APPLE_ID" ] || [ -z "$MACOS_NOTARIZATION_TEAM_ID" ] || [ -z "$MACOS_NOTARIZATION_PWD" ]; then
            echo "ERROR: Notarization credentials not provided"
            echo "Required secrets: MACOS_NOTARIZATION_APPLE_ID, MACOS_NOTARIZATION_TEAM_ID, MACOS_NOTARIZATION_PWD"
            exit 1
          fi

          echo "Notarizing app bundle: $APP_BUNDLE"

          # Create a zip for notarization
          ditto -c -k --keepParent "$APP_BUNDLE" "$APP_BUNDLE.zip"

          # Submit for notarization and capture the result
          echo "Submitting for notarization..."
          SUBMISSION_ID=$(xcrun notarytool submit "$APP_BUNDLE.zip" \
            --apple-id "$MACOS_NOTARIZATION_APPLE_ID" \
            --team-id "$MACOS_NOTARIZATION_TEAM_ID" \
            --password "$MACOS_NOTARIZATION_PWD" \
            --wait \
            --output-format json | jq -r '.id')

          # Get the submission info to check status
          echo "Checking notarization status..."
          xcrun notarytool info "$SUBMISSION_ID" \
            --apple-id "$MACOS_NOTARIZATION_APPLE_ID" \
            --team-id "$MACOS_NOTARIZATION_TEAM_ID" \
            --password "$MACOS_NOTARIZATION_PWD"

          # Get the submission log for debugging
          echo "Getting notarization log..."
          xcrun notarytool log "$SUBMISSION_ID" \
            --apple-id "$MACOS_NOTARIZATION_APPLE_ID" \
            --team-id "$MACOS_NOTARIZATION_TEAM_ID" \
            --password "$MACOS_NOTARIZATION_PWD"

          # Check if notarization was successful
          STATUS=$(xcrun notarytool info "$SUBMISSION_ID" \
            --apple-id "$MACOS_NOTARIZATION_APPLE_ID" \
            --team-id "$MACOS_NOTARIZATION_TEAM_ID" \
            --password "$MACOS_NOTARIZATION_PWD" \
            --output-format json | jq -r '.status')

          if [ "$STATUS" != "Accepted" ]; then
            echo "ERROR: Notarization failed with status: $STATUS"
            echo "Check the log output above for details"
            exit 1
          fi

          # Staple the ticket
          echo "Stapling notarization ticket..."
          xcrun stapler staple "$APP_BUNDLE"

          # Verify notarization
          echo "Verifying notarization..."
          xcrun stapler validate "$APP_BUNDLE"
          spctl -a -vvv "$APP_BUNDLE"
          chmod 755 "$APP_BUNDLE/Contents/MacOS/k8s-tray" "$APP_BUNDLE"

      - name: List artifacts
        run: ls -la dist/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: k8s-tray-${{ matrix.name }}
          path: ${{ matrix.artifacts }}

  create-release:
    needs: [determine-version, build-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release

          # Copy all built binaries to release directory, excluding generic names
          find artifacts -type f \( -name "k8s-tray-*" -o -name "*.exe" \) \
            -not -name "k8s-tray" \
            -exec cp {} -p release/ \;

          # Handle macOS app bundle separately
          if [ -d "artifacts/k8s-tray-macos" ]; then
            cd artifacts/k8s-tray-macos

            # First, look for app bundle in dist directory
            if [ -d "dist" ] && ls dist/K8s*.app >/dev/null 2>&1; then
              APP_BUNDLE=$(find dist -name "*.app" -type d | head -1)
              chmod 755 "$APP_BUNDLE/Contents/MacOS/k8s-tray" "$APP_BUNDLE"
              zip -r ../../release/k8s-tray-macos-app.zip dist/K8s*.app
              # Copy other macOS binaries from dist, excluding generic names
              find dist -name "*darwin*" -type f -not -name "k8s-tray" -exec cp -p {} ../../release/ \;
            # If no dist directory, look for app bundle in current directory
            elif ls K8s*.app >/dev/null 2>&1; then
              APP_BUNDLE=$(find . -name "*.app" -type d | head -1)
              chmod 755 "$APP_BUNDLE/Contents/MacOS/k8s-tray" "$APP_BUNDLE"
              zip -r ../../release/k8s-tray-macos-app.zip K8s*.app
              # Copy other macOS binaries from current directory, excluding generic names
              find . -name "*darwin*" -type f -not -name "k8s-tray" -exec cp -p {} ../../release/ \;
            else
              echo "No macOS app bundle found"
              exit 1
            fi

            cd ../..
          fi

          echo "=== Release directory contents ==="
          ls -la release/

      - name: Create checksums
        run: |
          cd release
          # Only create checksums for files, not directories
          find . -type f -not -name "checksums.txt" -exec sha256sum {} \; > checksums.txt
          echo "=== Checksums ==="
          cat checksums.txt

      - name: Create and push tag
        id: create_tag
        if: ${{ !github.event.inputs.dry_run }}
        run: |
          echo "Debug: Version from needs: ${{ needs.determine-version.outputs.version }}"
          echo "Debug: Tag from needs: ${{ needs.determine-version.outputs.tag }}"
          echo "Debug: Increment from needs: ${{ needs.determine-version.outputs.increment }}"

          # Set the tag variable with fallback
          TAG="${{ needs.determine-version.outputs.tag }}"
          if [ -z "$TAG" ]; then
            TAG="v${{ needs.determine-version.outputs.version }}"
          fi

          echo "Using tag: $TAG"

          # Check if this is actually a new version (increment should not be 'none')
          INCREMENT="${{ needs.determine-version.outputs.increment }}"
          if [ "$INCREMENT" = "none" ]; then
            echo "No version increment needed - skipping tag creation"
            echo "Current version ${{ needs.determine-version.outputs.version }} already exists"
            echo "tag_created=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if tag already exists on remote first (most reliable)
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG$"; then
            echo "Tag $TAG already exists on remote - skipping tag creation"
            echo "tag_created=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if tag already exists locally
          if git tag -l "$TAG" | grep -q "^$TAG$"; then
            echo "Tag $TAG already exists locally - skipping tag creation"
            echo "tag_created=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if GitHub release already exists
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG already exists - skipping tag creation"
            echo "tag_created=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Creating new tag: $TAG"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$TAG" -m "Release ${{ needs.determine-version.outputs.version }}"
          git push origin "$TAG"
          echo "tag_created=true" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: ${{ !github.event.inputs.dry_run && steps.create_tag.outputs.tag_created == 'true' }}
        run: |
          # Set the tag variable with fallback
          TAG="${{ needs.determine-version.outputs.tag }}"
          if [ -z "$TAG" ]; then
            TAG="v${{ needs.determine-version.outputs.version }}"
          fi

          echo "Creating GitHub release for tag: $TAG"

          # Use gh CLI to create the release
          gh release create "$TAG" \
            --title "Release ${{ needs.determine-version.outputs.version }}" \
            --notes "## Release ${{ needs.determine-version.outputs.version }}

          ### Downloads
          - **Linux**: \`k8s-tray-linux-amd64\`, \`k8s-tray-linux-arm64\`
          - **macOS**: \`k8s-tray-darwin-amd64\`, \`k8s-tray-darwin-arm64\`,
            \`k8s-tray-darwin-universal\`, \`k8s-tray-macos-app.zip\`
          - **Windows**: \`k8s-tray-windows-amd64.exe\`,
            \`k8s-tray-windows-arm64.exe\`

          ### Verification
          Use the included \`checksums.txt\` to verify download integrity:
          \`\`\`bash
          sha256sum -c checksums.txt
          \`\`\`

          ### Installation
          1. Download the appropriate binary for your platform
          2. Make it executable (Linux/macOS): \`chmod +x k8s-tray-*\`
          3. Run the binary or install the app bundle (macOS)" \
            --generate-notes \
            release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
