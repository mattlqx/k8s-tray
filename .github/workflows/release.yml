---
name: Release

"on":
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Perform a dry run (don't create release)"
        required: false
        default: false
        type: boolean
  workflow_run:
    workflows: ["Code Quality and Build"]
    types: [completed]
    branches: [main]

jobs:
  determine-version:
    runs-on: ubuntu-latest
    # Only run if CI workflow succeeded or if manually triggered
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    outputs:
      version: ${{ steps.semver.outputs.version }}
      tag: ${{ steps.semver.outputs.tag }}
      version_tag: ${{ steps.semver.outputs.version_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for conventional commits

      - name: Determine next version
        id: semver
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "^BREAKING CHANGE|^feat!|^fix!"
          minor_pattern: "^feat"
          bump_each_commit: true
          bump_each_commit_patch_pattern: "^fix|^perf"
          version_format: "${major}.${minor}.${patch}"
          search_commit_body: false
          user_format_type: "csv"

      - name: Show determined version
        run: |
          echo "Determined version: ${{ steps.semver.outputs.version }}"
          echo "Tag: ${{ steps.semver.outputs.tag }}"
          echo "Version tag: ${{ steps.semver.outputs.version_tag }}"
          echo "All outputs:"
          echo "  version: '${{ steps.semver.outputs.version }}'"
          echo "  tag: '${{ steps.semver.outputs.tag }}'"
          echo "  version_tag: '${{ steps.semver.outputs.version_tag }}'"
          echo "  increment: '${{ steps.semver.outputs.increment }}'"

  build-release:
    needs: determine-version
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
            make_target: build-linux
            artifacts: "dist/*linux*"
          - os: ubuntu-latest
            name: windows
            make_target: build-windows
            artifacts: "dist/*windows*"
          - os: macos-latest
            name: macos
            make_target: build-darwin-app
            artifacts: |
              dist/*darwin*
              dist/K8s*.app/**

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v4
        with:
          go-version: "1.23.4"
          cache: true

      - name: Update macOS Info.plist version
        if: matrix.os == 'macos-latest'
        run: |
          VERSION="${{ needs.determine-version.outputs.version }}"
          echo "Updating Info.plist version to: $VERSION"

          # Update CFBundleShortVersionString and CFBundleVersion
          sed -i '' "s|<key>CFBundleShortVersionString</key>|<key>CFBundleShortVersionString</key>|" assets/Info.plist
          sed -i '' "/<key>CFBundleShortVersionString<\/key>/{n;s|<string>.*</string>|<string>$VERSION</string>|;}" assets/Info.plist
          sed -i '' "/<key>CFBundleVersion<\/key>/{n;s|<string>.*</string>|<string>$VERSION</string>|;}" assets/Info.plist

          echo "Updated Info.plist contents:"
          cat assets/Info.plist

      - name: Install cross-compilation dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-mingw-w64-x86-64 \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu

      - name: Build for ${{ matrix.name }}
        run: make ${{ matrix.make_target }}

      - name: Sign macOS app bundle
        if: matrix.os == 'macos-latest'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.MACOS_CI_KEYCHAIN_PWD }}
        run: |
          # Turn our base64-encoded certificate back to a regular .p12 file
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

          # We need to create a new keychain, otherwise using the certificate will prompt
          # with a UI dialog asking for the certificate password, which we can't
          # use in a headless CI environment
          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain

          # Find the app bundle and sign it
          APP_BUNDLE=$(find dist -name "*.app" -type d | head -1)
          if [ -n "$APP_BUNDLE" ]; then
            echo "Signing app bundle: $APP_BUNDLE"

            # Sign the binary first
            BINARY_PATH="$APP_BUNDLE/Contents/MacOS/k8s-tray"
            if [ -f "$BINARY_PATH" ]; then
              echo "Signing binary: $BINARY_PATH"
              /usr/bin/codesign --force --options runtime --entitlements assets/entitlements.plist -s "$MACOS_CERTIFICATE_NAME" "$BINARY_PATH" -v
            fi

            # Then sign the app bundle
            /usr/bin/codesign --force --options runtime --entitlements assets/entitlements.plist -s "$MACOS_CERTIFICATE_NAME" "$APP_BUNDLE" -v

            # Verify the signature
            /usr/bin/codesign -vvv --deep --strict "$APP_BUNDLE"
            echo "=== Code signature verification ==="
            /usr/bin/codesign -dvvv "$APP_BUNDLE"

            # Check if it would pass Gatekeeper (this might still fail until notarized)
            echo "=== Gatekeeper assessment ==="
            spctl -a -vvv "$APP_BUNDLE" || echo "Note: Gatekeeper rejection is expected until notarization"
          else
            echo "No app bundle found to sign"
          fi

      - name: Notarize macOS app bundle
        if: matrix.os == 'macos-latest'
        env:
          MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
          MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
          MACOS_NOTARIZATION_PWD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
        run: |
          APP_BUNDLE=$(find dist -name "*.app" -type d | head -1)
          if [ -n "$APP_BUNDLE" ] && [ -n "$MACOS_NOTARIZATION_APPLE_ID" ]; then
            echo "Notarizing app bundle: $APP_BUNDLE"

            # Create a zip for notarization
            ditto -c -k --keepParent "$APP_BUNDLE" "$APP_BUNDLE.zip"

            # Submit for notarization
            xcrun notarytool submit "$APP_BUNDLE.zip" \
              --apple-id "$MACOS_NOTARIZATION_APPLE_ID" \
              --team-id "$MACOS_NOTARIZATION_TEAM_ID" \
              --password "$MACOS_NOTARIZATION_PWD" \
              --wait

            # Staple the ticket
            xcrun stapler staple "$APP_BUNDLE"

            # Verify notarization
            xcrun stapler validate "$APP_BUNDLE"
            spctl -a -vvv "$APP_BUNDLE"
          else
            echo "Skipping notarization - app bundle not found or notarization credentials not provided"
          fi

      - name: List artifacts
        run: ls -la dist/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: k8s-tray-${{ matrix.name }}
          path: ${{ matrix.artifacts }}

  create-release:
    needs: [determine-version, build-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release

          # Copy all built binaries to release directory, excluding generic names
          find artifacts -type f \( -name "k8s-tray-*" -o -name "*.exe" \) \
            -not -name "k8s-tray" \
            -exec cp {} release/ \;

          # Handle macOS app bundle separately
          if [ -d "artifacts/k8s-tray-macos" ]; then
            cd artifacts/k8s-tray-macos

            # First, look for app bundle in dist directory
            if [ -d "dist" ] && ls dist/K8s*.app >/dev/null 2>&1; then
              zip -r ../../release/k8s-tray-macos-app.zip dist/K8s*.app
              # Copy other macOS binaries from dist, excluding generic names
              find dist -name "*darwin*" -type f -not -name "k8s-tray" -exec cp {} ../../release/ \;
            # If no dist directory, look for app bundle in current directory
            elif ls K8s*.app >/dev/null 2>&1; then
              zip -r ../../release/k8s-tray-macos-app.zip K8s*.app
              # Copy other macOS binaries from current directory, excluding generic names
              find . -name "*darwin*" -type f -not -name "k8s-tray" -exec cp {} ../../release/ \;
            # If still no app bundle found, check if there are any .app directories
            elif find . -name "*.app" -type d | head -1 >/dev/null 2>&1; then
              find . -name "*.app" -type d -exec zip -r ../../release/k8s-tray-macos-app.zip {} \;
              # Copy other macOS binaries, excluding generic names
              find . -name "*darwin*" -type f -not -name "k8s-tray" -exec cp {} ../../release/ \;
            else
              echo "No macOS app bundle found"
              # Still copy other macOS binaries, excluding generic names
              find . -name "*darwin*" -type f -not -name "k8s-tray" -exec cp {} ../../release/ \;
            fi

            cd ../..
          fi

          echo "=== Release directory contents ==="
          ls -la release/

      - name: Create checksums
        run: |
          cd release
          # Only create checksums for files, not directories
          find . -type f -not -name "checksums.txt" -exec sha256sum {} \; > checksums.txt
          echo "=== Checksums ==="
          cat checksums.txt

      - name: Create and push tag
        if: ${{ !github.event.inputs.dry_run }}
        run: |
          echo "Debug: Version from needs: ${{ needs.determine-version.outputs.version }}"
          echo "Debug: Tag from needs: ${{ needs.determine-version.outputs.tag }}"

          # Set the tag variable with fallback
          TAG="${{ needs.determine-version.outputs.tag }}"
          if [ -z "$TAG" ]; then
            TAG="v${{ needs.determine-version.outputs.version }}"
          fi

          echo "Using tag: $TAG"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$TAG" -m "Release ${{ needs.determine-version.outputs.version }}"
          git push origin "$TAG"

      - name: Create GitHub Release
        if: ${{ !github.event.inputs.dry_run }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.determine-version.outputs.tag || format('v{0}', needs.determine-version.outputs.version) }}
          name: Release ${{ needs.determine-version.outputs.version }}
          files: |
            release/*
          generate_release_notes: true
          draft: false
          prerelease: >-
            ${{
              contains(needs.determine-version.outputs.tag, 'rc') ||
              contains(needs.determine-version.outputs.tag, 'beta') ||
              contains(needs.determine-version.outputs.tag, 'alpha')
            }}
          body: |
            ## Release ${{ needs.determine-version.outputs.version }}

            ### Downloads
            - **Linux**: `k8s-tray-linux-amd64`, `k8s-tray-linux-arm64`
            - **macOS**: `k8s-tray-darwin-amd64`, `k8s-tray-darwin-arm64`,
              `k8s-tray-darwin-universal`, `k8s-tray-macos-app.zip`
            - **Windows**: `k8s-tray-windows-amd64.exe`,
              `k8s-tray-windows-arm64.exe`

            ### Verification
            Use the included `checksums.txt` to verify download integrity:
            ```bash
            sha256sum -c checksums.txt
            ```

            ### Installation
            1. Download the appropriate binary for your platform
            2. Make it executable (Linux/macOS): `chmod +x k8s-tray-*`
            3. Run the binary or install the app bundle (macOS)
