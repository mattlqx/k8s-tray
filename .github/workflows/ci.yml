---
name: Code Quality and Build

"on":
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [created]

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - uses: actions/setup-go@v4
        with:
          go-version: "1.23.4"
          cache: true
      - name: Install golangci-lint
        run: |
          LINT_URL="https://raw.githubusercontent.com/golangci/golangci-lint"
          curl -sSfL ${LINT_URL}/master/install.sh \
            | sh -s -- -b $(go env GOPATH)/bin v1.62.0
      - name: Install additional linting tools
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
          go install github.com/go-critic/go-critic/cmd/gocritic@latest
      - uses: pre-commit/action@v3.0.1
        env:
          SKIP: go-unit-tests,golangci-lint
      # - uses: pre-commit-ci/lite-action@v1.1.0
      #   if: always()

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: "1.23.4"
          cache: true
      - name: Run tests with coverage
        run: |
          go mod tidy
          go test -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html
      - name: Run linters
        working-directory: .
        run: |
          go clean -modcache
          go mod tidy
          LINT_URL="https://raw.githubusercontent.com/golangci/golangci-lint"
          curl -sSfL ${LINT_URL}/master/install.sh \
            | sh -s -- -b $(go env GOPATH)/bin v1.62.0
          go install golang.org/x/tools/cmd/goimports@latest
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
          go install github.com/go-critic/go-critic/cmd/gocritic@latest
          golangci-lint run ./...
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

  build:
    runs-on: ubuntu-latest
    needs: [pre-commit, test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: "1.23.4"
          cache: true
      - name: Install cross-compilation dependencies
        run: |
          # Install MinGW for Windows cross-compilation
          sudo apt-get update
          sudo apt-get install -y \
            gcc-mingw-w64-x86-64 \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu
      - name: Build all platforms
        run: make build-all
      - name: List build artifacts
        run: ls -la dist/
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: k8s-tray-linux
          path: |
            dist/*linux*
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: k8s-tray-windows
          path: |
            dist/*windows*
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: k8s-tray-macos
          path: |
            dist/*darwin*

  build-macos:
    runs-on: macos-latest
    needs: [pre-commit, test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: "1.23.4"
          cache: true
      - name: Build for macOS with app bundle
        run: make build-darwin-app
      - name: List build artifacts
        run: ls -la dist/
      - name: Upload macOS app bundle
        uses: actions/upload-artifact@v4
        with:
          name: k8s-tray-macos-app
          path: |
            dist/K8s*.app/**
            dist/*darwin*

  # Release job - only runs on release creation
  release:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [build, build-macos]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create release directory
        run: |
          mkdir -p release
          find artifacts -type f -executable -o -name "*.exe" | \
            while read file; do
            cp "$file" release/
          done
          # Also copy the app bundle if it exists
          if [ -d "artifacts/k8s-tray-macos-app" ]; then
            cp -r artifacts/k8s-tray-macos-app/* release/
          fi
          ls -la release/

      - name: Create checksums
        run: |
          cd release
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/*
          generate_release_notes: true
          draft: false
          prerelease: >-
            ${{
              contains(github.ref, 'rc') ||
              contains(github.ref, 'beta') ||
              contains(github.ref, 'alpha')
            }}
